#!python
import os, subprocess

opts = Variables([], ARGUMENTS)

# Gets the standard flags CC, CCX, etc.
env = DefaultEnvironment()

# GDAL Path
gdal_include_path = ""
gdal_lib_path = ""
gdal_lib_name = "libgdal"

# Define our options
opts.Add(EnumVariable('target', "Compilation target", 'debug', ['d', 'debug', 'r', 'release']))
opts.Add(EnumVariable('platform', "Compilation platform", '', ['', 'windows', 'x11', 'linux', 'osx']))
opts.Add(EnumVariable('p', "Compilation target, alias for 'platform'", '', ['', 'windows', 'x11', 'linux', 'osx']))
opts.Add(BoolVariable('use_llvm', "Use the LLVM / Clang compiler", 'no'))

# only support 64 at this time..
bits = 64

# Updates the environment with the option variables.
opts.Update(env)

# Process some arguments
if env['p'] != '':
    env['platform'] = env['p']

if env['platform'] == '':
    print("No valid target platform selected.")
    quit();

env['target_path'] = 'build/'
env['target_name'] = 'libRasterTileExtractor'

env.Append(CXXFLAGS=['-std=c++17'])

# make sure our binding library is properly includes
env.Append(CPPPATH=[gdal_include_path])
env.Append(LIBPATH=[gdal_lib_path])
env.Append(LIBS=[gdal_lib_name])

# tweak this if you want to use different folders, or more folders, to store your source code in.
env.Append(CPPPATH=['./'])
sources = Glob('./*.cpp')

library = env.SharedLibrary(target=env['target_path'] + env['target_name'] , source=sources)

